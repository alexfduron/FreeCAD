9# -*- coding: utf-8 -*-

# Macro Begin: C:\Users\alexf\AppData\Roaming\FreeCAD\Macro\Hoop_1.FCMacro +++++++++++++++++++++++++++++++++++++++++++++++++
import FreeCAD as App
import PartDesignGui
import PartDesign
import Sketcher
import Part
import math

# Tomamos el archivo activo
Plano = App.activeDocument()

### Begin command Std_Part
Pieza_H1 = Plano.addObject('App::Part','Part_H001')
Plano.Tip = Pieza_H1
Pieza_H1.Label = 'Parte_H001'
Plano.recompute()




def Crear_Grupo(Titulo, Etiqueta = '', Objeto_X = ''):
	Grupo_X = Plano.addObject('App::DocumentObjectGroup', Titulo)
	Plano.Tip = Grupo_X
	if Etiqueta == '':
		Grupo_X.Label = Titulo
	else:
		Grupo_X.Label = Etiqueta
	if Objeto_X == '':
		Plano.Tip = Grupo_X
	else:
		Objeto_X.addObject(Grupo_X)
	Plano.recompute
	return Grupo_X


def Crear_Cuerpo(Titulo, Etiqueta = '', Objeto_X = ''):
	Cuerpo_X = Plano.addObject('PartDesign::Body', Titulo)
	if Etiqueta == '':
		Cuerpo_X.Label = Titulo
	else:
		Cuerpo_X.Label = Etiqueta
	if Objeto_X == '':
		Plano.Tip = Cuerpo_X
	else:
		Objeto_X.addObject(Cuerpo_X)
	Plano.recompute
	return Cuerpo_X


def Crear_Boceto(Titulo, Etiqueta = '', Objeto_X = '', Plano_X = ''):
	Boceto_X = Plano.addObject('Sketcher::SketchObject', Titulo)
	Plano.Tip = Boceto_X
	if Plano_X == '':
		Plano_X = 'XY_Plane'
	if Etiqueta == '':
		Boceto_X.Label = Titulo
	else:
		Boceto_X.Label = Etiqueta
	Boceto_X.MapMode = 'FlatFace'
	if Objeto_X == '':
		Plano.Tip = Boceto_X
		Cuerpo_New = Crear_Cuerpo('New_Body', '', Pieza_H1)
		Cuerpo_New.addObject(Boceto_X)
		for k in Cuerpo_New.Origin.OriginFeatures:
			if k.Role == Plano_X:
				XY_Plano = k
		Boceto_X.AttachmentSupport = (XY_Plano, [''])
		del XY_Plano
	else:
		Objeto_X.addObject(Boceto_X)
		for k in Objeto_X.Origin.OriginFeatures:
			if k.Role == Plano_X:
				XY_Plano = k
		Boceto_X.AttachmentSupport = (XY_Plano, [''])
		del XY_Plano
	Plano.recompute
	return Boceto_X	



### Begin command Std_Group
Grupo_LH1 = Crear_Grupo('Group_LH001', '', Pieza_H1)
	
	
### Begin command PartDesign_Body
Cuerpo_H1 = Crear_Cuerpo('Body_H001', '', Pieza_H1)


### Begin command Sketch
Boceto_H1 = Crear_Boceto('Sketch_H001', '', Cuerpo_H1)


### Begin command PartDesign_Body
Cuerpo_LH1 = Crear_Cuerpo('Body_LH001', '', Grupo_LH1)


### Begin command Sketch
Boceto_LVS_C = Crear_Boceto('Sketch_LVS_C', 'Sketch_LVS_Cuerpo', Cuerpo_LH1)
Boceto_LVS_T = Crear_Boceto('Sketch_LVS_T', 'Sketch_LVS_Tapadera', Cuerpo_LH1)
Boceto_LVS_P1 = Crear_Boceto('Sketch_LVS_P1', 'Sketch_LVS_Pieza1', Cuerpo_LH1)








Lista_Linea = []


def Crear_Linea(Pt1, Pt2, Boceto_X, Restriccion_X = '', Indice = '', Simetria = False):
	Lista_Linea.append(list(Boceto_X.addGeometry([Part.LineSegment(Pt1, Pt2)], False)))
	if Restriccion_X != '':
		Boceto_X.addConstraint(Sketcher.Constraint(Restriccion_X, Lista_Linea[-1][0]))
	if Indice != '':
		if Indice == 0 and Simetria == False:
			Lista_Linea[-1].append(1)
			Lista_Linea[-1].append(2)
		elif Indice == 1:
			if Lista_Linea[-2][2] == 2:
				if Lista_Linea[-2][7] == Pt1:
					if Simetria == False:
						Lista_Linea[-2][1] = 1
						Lista_Linea[-2][2] = 2
					Lista_Linea[-1].append(1)
					Lista_Linea[-1].append(2)
				elif Lista_Linea[-2][7] == Pt2:
					if Simetria == False:
						Lista_Linea[-2][1] = 1
						Lista_Linea[-2][2] = 2
					Lista_Linea[-1].append(2)
					Lista_Linea[-1].append(1)
			elif Lista_Linea[-2][2] == 1:
				if Lista_Linea[-2][6] == Pt1:
					if Simetria == False:
						Lista_Linea[-2][1] = 2
						Lista_Linea[-2][2] = 1
					Lista_Linea[-1].append(1)
					Lista_Linea[-1].append(2)
				elif Lista_Linea[-2][6] == Pt2:
					if Simetria == False:
						Lista_Linea[-2][1] = 2
						Lista_Linea[-2][2] = 1
					Lista_Linea[-1].append(2)
					Lista_Linea[-1].append(1)
		else:
			if Lista_Linea[-2][2] == 1:
				if Lista_Linea[-2][6] == Pt1:
					Lista_Linea[-1].append(1)
					Lista_Linea[-1].append(2)
				elif Lista_Linea[-2][6] == Pt2:
					Lista_Linea[-1].append(2)
					Lista_Linea[-1].append(1)
			elif Lista_Linea[-2][2] == 2:
				if Lista_Linea[-2][7] == Pt1:
					Lista_Linea[-1].append(1)
					Lista_Linea[-1].append(2)
				elif Lista_Linea[-2][7] == Pt2:
					Lista_Linea[-1].append(2)
					Lista_Linea[-1].append(1)
	Lista_Linea[-1].append('linea')
	Lista_Linea[-1].append(Boceto_X.Label)
	Pt3 = Pt2 - Pt1
	Lista_Linea[-1].append(Pt3.Length)
	Lista_Linea[-1].append(Pt1)
	Lista_Linea[-1].append(Pt2)
	Lista_Linea[-1].append(0)
	
	
def Crear_Arco(Pt1, Eje, Radio, Boceto_X, Ang_Ini, Ang_Fin, Indice = '', Simetria = False):
	Lista_Linea.append(list(Boceto_X.addGeometry([Part.ArcOfCircle(Part.Circle(Pt1, Eje , Radio), Ang_Ini, Ang_Fin)], False)))
	Boceto_X.addConstraint(Sketcher.Constraint('Radius', Lista_Linea[-1][0], Radio))
	Pt1_Temp = Pt1 + App.Vector(round(Radio * math.cos(Ang_Ini), 5), round(Radio * math.sin(Ang_Ini), 5), 0)
	Pt2_Temp = Pt1 + App.Vector(round(Radio * math.cos(Ang_Fin), 5), round(Radio * math.sin(Ang_Fin), 5), 0)
	if Indice != '':
		if Indice == 0 and Simetria == False:
			Lista_Linea[-1].append(2)
			Lista_Linea[-1].append(1)
		elif Indice == 1:
			if Lista_Linea[-2][2] == 2:
				if Lista_Linea[-2][7] == Pt1_Temp:
					if Simetria == False:
						Lista_Linea[-2][1] = 1
						Lista_Linea[-2][2] = 2
					Lista_Linea[-1].append(1)
					Lista_Linea[-1].append(2)
				elif Lista_Linea[-2][7] == Pt2_Temp:
					if Simetria == False:
						Lista_Linea[-2][1] = 1
						Lista_Linea[-2][2] = 2
					Lista_Linea[-1].append(2)
					Lista_Linea[-1].append(1)
			elif Lista_Linea[-2][2] == 1:
				if Lista_Linea[-2][6] == Pt1_Temp:
					if Simetria == False:
						Lista_Linea[-2][1] = 2
						Lista_Linea[-2][2] = 1
					Lista_Linea[-1].append(1)
					Lista_Linea[-1].append(2)
				elif Lista_Linea[-2][6] == Pt2_Temp:
					if Simetria == False:
						Lista_Linea[-2][1] = 2
						Lista_Linea[-2][2] = 1
					Lista_Linea[-1].append(2)
					Lista_Linea[-1].append(1)
		else:
			if Lista_Linea[-2][2] == 1:
				if Lista_Linea[-2][6] == Pt1_Temp:
					Lista_Linea[-1].append(1)
					Lista_Linea[-1].append(2)
				elif Lista_Linea[-2][6] == Pt2_Temp:
					Lista_Linea[-1].append(2)
					Lista_Linea[-1].append(1)
			elif Lista_Linea[-2][2] == 2:
				if Lista_Linea[-2][7] == Pt1_Temp:
					Lista_Linea[-1].append(1)
					Lista_Linea[-1].append(2)
				elif Lista_Linea[-2][7] == Pt2_Temp:
					Lista_Linea[-1].append(2)
					Lista_Linea[-1].append(1)
	Lista_Linea[-1].append('arco')
	Lista_Linea[-1].append(Boceto_X.Label)
	Lista_Linea[-1].append(Radio)
	Lista_Linea[-1].append(Pt1_Temp)
	Lista_Linea[-1].append(Pt2_Temp)
	Lista_Linea[-1].append(Pt1)
	
	
def Crear_Circulo(Pt1, Eje, Radio, Boceto_X):
	Lista_Linea.append(list(Boceto_X.addGeometry([Part.Circle(Pt1, Eje, Radio)], False)))
	Boceto_X.addConstraint(Sketcher.Constraint('Radius', Lista_Linea[-1][0], Radio))
	Lista_Linea[-1].append(0)
	Lista_Linea[-1].append(0)
	Lista_Linea[-1].append('circulo')
	Lista_Linea[-1].append(Boceto_X.Label)
	Lista_Linea[-1].append(Radio)
	Lista_Linea[-1].append(0)
	Lista_Linea[-1].append(0)
	Lista_Linea[-1].append(Pt1)
	
	



def Unir_Lineas(Boceto_X, Total_Lista):
	for j in range(0, Total_Lista)[::-1]:
		Valor_Futuro = (j - 1) % Total_Lista
		
		if Lista_Linea[::-1][j][3] == 'linea' and Lista_Linea[::-1][Valor_Futuro][3] == 'linea':
			Vector01 = Lista_Linea[::-1][j][7] - Lista_Linea[::-1][j][6]
			Vector02 = Lista_Linea[::-1][Valor_Futuro][7] - Lista_Linea[::-1][Valor_Futuro][6]
			Vec3 = Vector01.cross(Vector02)
			if abs(round(Vec3.Length, 5)) == 0:
				Opcion = 'paralelo'
			else:
				Opcion = 'perpendicular'
			
		if Lista_Linea[::-1][j][3] == 'linea' and Lista_Linea[::-1][Valor_Futuro][3] == 'arco':
			Vector01 = Lista_Linea[::-1][j][7] - Lista_Linea[::-1][j][6]
			if Lista_Linea[::-1][Valor_Futuro][1] == 1:
				Vector02 = Lista_Linea[::-1][Valor_Futuro][6] - Lista_Linea[::-1][Valor_Futuro][8]
			elif Lista_Linea[::-1][Valor_Futuro][1] == 2:
				Vector02 = Lista_Linea[::-1][Valor_Futuro][7] - Lista_Linea[::-1][Valor_Futuro][8]
			Vec3 = Vector01.dot(Vector02)
			if abs(round(Vec3, 5)) == 0:
				Opcion = 'paralelo'
			else:
				Opcion = 'perpendicular'
			
		if Lista_Linea[::-1][j][3] == 'arco' and Lista_Linea[::-1][Valor_Futuro][3] == 'linea':
			if Lista_Linea[::-1][j][2] == 1:
				Vector01 = Lista_Linea[::-1][j][6] - Lista_Linea[::-1][j][8]
			elif Lista_Linea[::-1][j][2] == 2:
				Vector01 = Lista_Linea[::-1][j][7] - Lista_Linea[::-1][j][8]
			Vector02 = Lista_Linea[::-1][Valor_Futuro][7] - Lista_Linea[::-1][Valor_Futuro][6]
			Vec3 = Vector01.dot(Vector02)
			if abs(round(Vec3, 5)) == 0:
				Opcion = 'paralelo'
			else:
				Opcion = 'perpendicular'
			
		if Lista_Linea[::-1][j][3] == 'arco' and Lista_Linea[::-1][Valor_Futuro][3] == 'arco':
			if Lista_Linea[::-1][j][2] == 1:
				Vector01 = Lista_Linea[::-1][j][6] - Lista_Linea[::-1][j][8]
			elif Lista_Linea[::-1][j][2] == 2:
				Vector01 = Lista_Linea[::-1][j][7] - Lista_Linea[::-1][j][8]
			if Lista_Linea[::-1][Valor_Futuro][1] == 1:
				Vector02 = Lista_Linea[::-1][Valor_Futuro][6] - Lista_Linea[::-1][Valor_Futuro][8]
			elif Lista_Linea[::-1][Valor_Futuro][1] == 2:
				Vector02 = Lista_Linea[::-1][Valor_Futuro][7] - Lista_Linea[::-1][Valor_Futuro][8]
			Vec3 = Vector01.cross(Vector02)
			if abs(round(Vec3.Length, 5)) == 0:
				Opcion = 'paralelo'
			else:
				Opcion = 'perpendicular'
		
		'''
		print(Lista_Linea[::-1][j][3] + ' + ' + Lista_Linea[::-1][Valor_Futuro][3] + ' = ' + Opcion)
		Vec3 = Vector01.dot(Vector02)
		Vec4 = Vector01.cross(Vector02)
		print([Vector01, Vector02, Vec3, Vec4.Length])
		'''
		
		
		if Opcion == 'paralelo':
			Boceto_X.addConstraint(Sketcher.Constraint('Tangent', Lista_Linea[::-1][j][0], Lista_Linea[::-1][j][2], Lista_Linea[::-1][Valor_Futuro][0], Lista_Linea[::-1][Valor_Futuro][1]))
		if Opcion == 'perpendicular':
			Boceto_X.addConstraint(Sketcher.Constraint('Coincident', Lista_Linea[::-1][j][0], Lista_Linea[::-1][j][2], Lista_Linea[::-1][Valor_Futuro][0], Lista_Linea[::-1][Valor_Futuro][1]))


def Crear_Contorno(Largo_X, Alto_X, Radio_X, Boceto_X):


	# Crear lineas en el boceto
	Lista01 = [
		['linea',
		'Horizontal',
		App.Vector(-(Largo_X - 2 * Radio_X) / 2, Alto_X / 2, 0), 
		App.Vector((Largo_X - 2 * Radio_X) / 2, Alto_X / 2, 0)
		],
		
		['arco',
		App.Vector((Largo_X - 2 * Radio_X) / 2, (Alto_X - 2 * Radio_X) / 2, 0), 
		App.Vector(0, 0, 1), 
		Radio_X, 
		math.radians(0), math.radians(90)
		],
		
		['linea',
		'Vertical',
		App.Vector(Largo_X / 2, (Alto_X - 2 * Radio_X) / 2, 0), 
		App.Vector(Largo_X / 2, -(Alto_X - 2 * Radio_X) / 2, 0)
		],
		
		['arco',
		App.Vector((Largo_X - 2 * Radio_X) / 2, -(Alto_X - 2 * Radio_X) / 2, 0), 
		App.Vector(0, 0, 1), 
		Radio_X, 
		math.radians(270), math.radians(360)
		],
		
		['linea',
		'Horizontal',
		App.Vector((Largo_X - 2 * Radio_X) / 2, -Alto_X / 2, 0), 
		App.Vector(-(Largo_X - 2 * Radio_X) / 2, -Alto_X / 2, 0)
		],
		
		['arco',
		App.Vector(-(Largo_X - 2 * Radio_X) / 2, -(Alto_X - 2 * Radio_X) / 2, 0), 
		App.Vector(0, 0, 1), 
		Radio_X, 
		math.radians(180), math.radians(270) 
		],
		
		['linea',
		'Vertical',
		App.Vector(-Largo_X / 2, -(Alto_X - 2 * Radio_X) / 2, 0), 
		App.Vector(-Largo_X / 2, (Alto_X - 2 * Radio_X) / 2, 0)
		],
		
		['arco',
		App.Vector(-(Largo_X - 2 * Radio_X) / 2, (Alto_X - 2 * Radio_X) / 2, 0), 
		App.Vector(0, 0, 1), 
		Radio_X, 
		math.radians(90), math.radians(180)
		]
	]
	
	#Crear_Linea(Pt1, Pt2, Boceto_X, Restriccion_X = '', Indice = '', Simetria = False):
	#Crear_Arco(Pt1, Eje, Radio, Boceto_X, Ang_Ini, Ang_Fin, Indice = '', Simetria = False):
	for j in range(0, len(Lista01)):
		if Lista01[j][0] == 'linea':
			Crear_Linea(Lista01[j][2], Lista01[j][3], Boceto_X, Lista01[j][1], j)
		if Lista01[j][0] == 'arco':
			Crear_Arco(Lista01[j][1], Lista01[j][2], Lista01[j][3], Boceto_X, Lista01[j][4], Lista01[j][5], j)
	
	
	Plano.recompute()
	
	
	'''
	# cerrar los puntos
	for j in range(0, len(Lista01))[::-1]:
		Valor_Futuro = (j - 1) % len(Lista01)
		Boceto_X.addConstraint(Sketcher.Constraint('Tangent', Lista_Linea[::-1][j][0], Lista_Linea[::-1][j][2], Lista_Linea[::-1][Valor_Futuro][0], Lista_Linea[::-1][Valor_Futuro][1]))
	
	
	Plano.recompute()
	'''
	
	
	
	# Unir_Lineas(Boceto_X, Total_Lista):
	Unir_Lineas(Boceto_X, len(Lista01))
	
	Plano.recompute()
	
	
	
	
	

# crear Boceto Cuerpo
Largo_Total = 156
Alto_Total = 156
Radio_Pral = 35

Largo_Y = Largo_Total
Alto_Y = Alto_Total
Radio_Y = Radio_Pral

Crear_Contorno(Largo_Y, Alto_Y, Radio_Y, Boceto_LVS_C)

Boceto_LVS_C.addConstraint(Sketcher.Constraint('DistanceX',-1,1,1,3, (Largo_Y - 2 * Radio_Y) / 2))
Boceto_LVS_C.addConstraint(Sketcher.Constraint('DistanceY',-1,1,1,3, (Alto_Y - 2 * Radio_Y) / 2))
Boceto_LVS_C.addConstraint(Sketcher.Constraint('DistanceX',5,3,3,3, (Largo_Y - 2 * Radio_Y)))
Boceto_LVS_C.addConstraint(Sketcher.Constraint('DistanceY',5,3,7,3, (Alto_Y - 2 * Radio_Y)))




Largo_Y += 1 + 1
Alto_Y += 1 + 1
Radio_Y += 1

Crear_Contorno(Largo_Y, Alto_Y, Radio_Y, Boceto_LVS_C)

Boceto_LVS_C.addConstraint(Sketcher.Constraint('Coincident',1,3,9,3))
Boceto_LVS_C.addConstraint(Sketcher.Constraint('Coincident',5,3,13,3))




Largo_Y += 14 + 14
Alto_Y += 14 + 14
Radio_Y += 14

Crear_Contorno(Largo_Y, Alto_Y, Radio_Y, Boceto_LVS_C)

Boceto_LVS_C.addConstraint(Sketcher.Constraint('Coincident',1,3,17,3))
Boceto_LVS_C.addConstraint(Sketcher.Constraint('Coincident',5,3,21,3))



Largo_Y += 1 + 1
Alto_Y += 1 + 1
Radio_Y += 1

Crear_Contorno(Largo_Y, Alto_Y, Radio_Y, Boceto_LVS_C)

Boceto_LVS_C.addConstraint(Sketcher.Constraint('Coincident',1,3,25,3))
Boceto_LVS_C.addConstraint(Sketcher.Constraint('Coincident',5,3,29,3))



# crear Boceto Tapadera
Largo_Y = Largo_Total
Alto_Y = Alto_Total
Radio_Y = Radio_Pral

Largo_Y += 1.5 + 1.5
Alto_Y += 1.5 + 1.5
Radio_Y += 1.5

Crear_Contorno(Largo_Y, Alto_Y, Radio_Y, Boceto_LVS_T)

Boceto_LVS_T.addConstraint(Sketcher.Constraint('DistanceX',-1,1,1,3, (Largo_Y - 2 * Radio_Y) / 2))
Boceto_LVS_T.addConstraint(Sketcher.Constraint('DistanceY',-1,1,1,3, (Alto_Y - 2 * Radio_Y) / 2))
Boceto_LVS_T.addConstraint(Sketcher.Constraint('DistanceX',5,3,3,3, (Largo_Y - 2 * Radio_Y)))
Boceto_LVS_T.addConstraint(Sketcher.Constraint('DistanceY',5,3,7,3, (Alto_Y - 2 * Radio_Y)))



Largo_Y += 13 + 13
Alto_Y += 13 + 13
Radio_Y += 13

Crear_Contorno(Largo_Y, Alto_Y, Radio_Y, Boceto_LVS_T)

Boceto_LVS_T.addConstraint(Sketcher.Constraint('Coincident',1,3,9,3))
Boceto_LVS_T.addConstraint(Sketcher.Constraint('Coincident',5,3,13,3))


def Fijar_Circulo_Origen(Pt1, Boceto_X, Index_Obj):
	if list(Pt1)[0] >= 0:
		Boceto_X.addConstraint(Sketcher.Constraint('DistanceX', -1,1,Index_Obj,3, abs(list(Pt1)[0])))
	else:
		Boceto_X.addConstraint(Sketcher.Constraint('DistanceX', Index_Obj,3,-1,1, abs(list(Pt1)[0])))
	if list(Pt1)[1] >= 0:
		Boceto_X.addConstraint(Sketcher.Constraint('DistanceY', -1,1,Index_Obj,3, abs(list(Pt1)[1])))
	else:
		Boceto_X.addConstraint(Sketcher.Constraint('DistanceY', Index_Obj,3,-1,1, abs(list(Pt1)[1])))


#Crear_Agujeros()
val_x = (Largo_Total / 2) + 1 + 14 / 2
val_y = (Alto_Total / 2) + 1 + 14 / 2

Lista03 = [
[App.Vector(38, val_y, 0), App.Vector(0, 0, 1), 1.5],
[App.Vector(val_x, 38, 0), App.Vector(0, 0, 1), 1.5],
[App.Vector(val_x, -38, 0), App.Vector(0, 0, 1), 1.5],
[App.Vector(38, -val_y, 0), App.Vector(0, 0, 1), 1.5],
[App.Vector(-38, -val_y, 0), App.Vector(0, 0, 1), 1.5],
[App.Vector(-val_x, -38, 0), App.Vector(0, 0, 1), 1.5],
[App.Vector(-val_x, 38, 0), App.Vector(0, 0, 1), 1.5],
[App.Vector(-38, val_y, 0), App.Vector(0, 0, 1), 1.5]
]

for k in range(0, len(Lista03)):
	Crear_Circulo(Lista03[k][0], Lista03[k][1], Lista03[k][2], Boceto_LVS_T)
	Fijar_Circulo_Origen(Lista03[k][0], Boceto_LVS_T, Lista_Linea[-1][0])

for k in range(0, len(Lista03)):
	Crear_Circulo(Lista03[k][0], Lista03[k][1], Lista03[k][2], Boceto_LVS_C)
	Fijar_Circulo_Origen(Lista03[k][0], Boceto_LVS_C, Lista_Linea[-1][0])


# crear Boceto Pieza 1
Origen_Y = -(Alto_Total / 2) - 1 - 14 - 1 + 1
Origen_X = 0

Lista04 = [
['linea', 'Horizontal', Origen_X, Origen_Y, Origen_X + 33, Origen_Y],
['linea', 'Vertical', Origen_X + 33, Origen_Y, Origen_X + 33, Origen_Y - 1],
['arco', Origen_X + 33, Origen_Y - 6, App.Vector(0, 0, 1), 5, math.radians(90), math.radians(180)],
['linea', 'Vertical', Origen_X + 28, Origen_Y - 6, Origen_X + 28, Origen_Y - 16],
['arco', Origen_X + 23, Origen_Y - 16, App.Vector(0, 0, 1), 5, math.radians(270), math.radians(360)],
['linea', 'Horizontal', Origen_X + 23, Origen_Y - 21, Origen_X, Origen_Y - 21]
]

#Crear_Linea(Pt1, Pt2, Boceto_X, Restriccion_X = '', Indice = '', Simetria = False):
#Crear_Arco(Pt1, Eje, Radio, Boceto_X, Ang_Ini, Ang_Fin, Indice = '', Simetria = False):
for k in range(0, len(Lista04)):
	if Lista04[k][0] == 'linea':
		Crear_Linea(App.Vector(Lista04[k][2], Lista04[k][3], 0), App.Vector(Lista04[k][4], Lista04[k][5], 0), Boceto_LVS_P1, Lista04[k][1], k)
	if Lista04[k][0] == 'arco':
		Crear_Arco(App.Vector(Lista04[k][1], Lista04[k][2], 0), Lista04[k][3], Lista04[k][4], Boceto_LVS_P1, Lista04[k][5], Lista04[k][6], k)

for k in range(0, len(Lista04)):
	if Lista04[::-1][k][0] == 'linea':
		Crear_Linea(App.Vector(-Lista04[::-1][k][2], Lista04[::-1][k][3], 0), App.Vector(-Lista04[::-1][k][4], Lista04[::-1][k][5], 0), Boceto_LVS_P1, Lista04[::-1][k][1], k, True)
	if Lista04[::-1][k][0] == 'arco':
		Crear_Arco(App.Vector(-Lista04[::-1][k][1], Lista04[::-1][k][2], 0), Lista04[::-1][k][3], Lista04[::-1][k][4], Boceto_LVS_P1, Lista04[::-1][k][5] - math.radians(90), Lista04[::-1][k][6] - math.radians(90), k, True)

'''
# cerrar los puntos
for j in range(0, 2 * len(Lista04))[::-1]:
	Valor_Futuro = (j - 1) % (2 * len(Lista04))
	Boceto_LVS_P1.addConstraint(Sketcher.Constraint('Tangent', Lista_Linea[::-1][j][0], Lista_Linea[::-1][j][2], Lista_Linea[::-1][Valor_Futuro][0], Lista_Linea[::-1][Valor_Futuro][1]))
	
	
Plano.recompute()
'''

# Unir_Lineas(Boceto_X, Total_Lista):
Unir_Lineas(Boceto_LVS_P1, 2 * len(Lista04))

Plano.recompute()



print(len(Lista_Linea))
for l in Lista_Linea:
	print(l)




# Macro End: C:\Users\alexf\AppData\Roaming\FreeCAD\Macro\Hoop_1.FCMacro +++++++++++++++++++++++++++++++++++++++++++++++++
